{"ast":null,"code":"/**\r\n * Copyright (c) 2015-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\n\n/**\r\n * The `defineToStringTag()` function checks first to see if the runtime\r\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\r\n * is defined as a `Symbol` instance. If both conditions are met, the\r\n * Symbol.toStringTag property is defined as a getter that returns the\r\n * supplied class constructor's name.\r\n *\r\n * @method defineToStringTag\r\n *\r\n * @param {Class<any>} classObject a class such as Object, String, Number but\r\n * typically one of your own creation through the class keyword; `class A {}`,\r\n * for example.\r\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}